Description: >
  Traefik Cloud Native Edge Router - Automatic and Dynamic Routing

Parameters:
  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  TargetGroup:
    Description: The Application Load Balancer Target Group to register with
    Type: String
  Domain:
    Type: String
    Description: Domain in which tasks should be registered to - MUST already exist as a zone in Route53
    Default: na.nissancloud.com
  Environment:
    Type: String
    AllowedValues:
      - tech
      - dev
      - qa
      - prod
    Default: dev
  DockerImageOverride:
    Type: String
    Description: The Repository URI for the docker image
  SNSTopic:
    Description: Provide the name of SNS Topic to which notifications to be sent
    Type: String
    Default: '' 
  TemplateS3Region:
    Type: String
  TemplateS3Location:
    Type: String

Conditions:
  DefaultImage: !Equals [ !Ref DockerImageOverride, "" ]

Resources:
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      Role: !GetAtt ServiceRole.Arn
      SchedulingStrategy: DAEMON
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: "traefik-service"
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: traefik-service
      ContainerDefinitions:
        - Name: traefik-service
          Essential: true
          Image: !If [ DefaultImage, "464598779341.dkr.ecr.us-east-1.amazonaws.com/traefik:latest", !Ref DockerImageOverride ]
          Environment:
            - Name: STACK_NAME
              Value: !Ref AWS::StackName
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: CLUSTER_HOST
              Value: !Ref Cluster
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: DOMAIN
              Value: !Ref Domain
          DockerLabels:
            traefik.frontend.rule: !Join
              - ""
              - - "Host:node-"
                - !Ref Environment
                - "."
                - !Ref Domain
            traefik.enable: 'true'
            traefik.protocol: 'http'
            traefik.port: '8080'
            traefik.frontend.entryPoints: 'http,https'
          Memory: 512
          MemoryReservation: 256
          PortMappings:
            - ContainerPort: 80
            - ContainerPort: 8080
            - ContainerPort: 443
          Command:
            - "--api"
            - "--logLevel=DEBUG"
            - "--insecureskipverify"
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f "http://localhost:80/ping"
            Interval: 30
            Retries: 3
            StartPeriod: 30
            Timeout: 5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: 'true'
              awslogs-group: !Sub ${Cluster}-ContainerLogs
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref AWS::StackName

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${EnvironmentName}-traefik
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: !Sub ecs-service-${EnvironmentName}-traefik-policy
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement":
                [
                  {
                    "Effect": "Allow",
                    "Action":
                      [
                        "ec2:AuthorizeSecurityGroupIngress",
                        "ec2:Describe*",
                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                        "elasticloadbalancing:Describe*",
                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                        "elasticloadbalancing:DeregisterTargets",
                        "elasticloadbalancing:DescribeTargetGroups",
                        "elasticloadbalancing:DescribeTargetHealth",
                        "elasticloadbalancing:RegisterTargets"
                      ],
                    "Resource": "*"
                  }
                ]
            }

  ECSServiceCloudWatchAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${TemplateS3Region}.amazonaws.com/${TemplateS3Location}/infrastructure/cloudwatch-alarms-ecs-service.cfn.yml
      Parameters:
        EnvironmentName: !Sub ${EnvironmentName}-Traefik
        ClusterName: !Ref Cluster
        ServiceName: !GetAtt Service.Name
        SnsTopicName: !Ref SNSTopic
